buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
        maven {
            url='https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "net.saliman:gradle-properties-plugin:1.5.1"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: 'org.spongepowered.mixin' //TODO add back when mixin are in again
apply plugin: 'net.saliman.properties'
apply plugin: 'maven-publish'
apply plugin: 'idea'

version = version_major + '.' + version_minor + '.' + version_patch
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_archivesBaseName + "-" + mc_version

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${project.mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            //arg "-mixin.config=bml.mixins.json" //TODO add back when mixin are in again

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //arg "-mixin.config=bml.mixins.json" //TODO add back when mixin are in again

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'blackdogsmoddinglibrary', '--all', '--output', file("src/main/generated_resources"), '--existing', file('src/main/resources/')

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/generated_resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.2'
	
	//compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "bml",
            "Specification-Vendor": "black_dog20",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "bml",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"black_dog20",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            //"MixinConfigs": "bml.mixins.json" //TODO add back when mixin are in again
        ])
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    destinationDirectory.set(file('build/libs'))
    mustRunAfter "jar"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    destinationDirectory.set(file('build/libs'))
    mustRunAfter "jar"
}

artifacts {
    archives sourceJar
}

curseforge {
    apiKey = curseApiKey
    project {
        addArtifact (sourceJar)
        id = '371791'
        changelogType = 'markdown'
        changelog = 'As always find the changelog here [CHANGELOG](https://github.com/Crimix/bml/blob/1.16.3/CHANGELOG.md)'
        releaseType = 'release'
        addGameVersion 'Forge'
        addGameVersion 'Java 8'
        addGameVersion '1.16.3'
        addGameVersion '1.16.4'
        addGameVersion '1.16.5'
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/crimix/bml")
            credentials {
                username = githubUser
                password = githubToken
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId 'bml'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact jar
        }
        mavenJava(MavenPublication) {
            artifactId 'bml'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact sourceJar
        }
    }
}

//TODO add back when mixin are in again
//mixin {
//    add sourceSets.main, "bml.refmap.json"
//}