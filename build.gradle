buildscript {
    repositories {
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'
apply from: 'common.gradle'

version = version_major + '.' + version_minor + '.' + version_patch
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_archivesBaseName + "-" + mc_version

// Mojang ships Java 17 to end users in 1.18+ instead of Java 16 in 1.17 so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=bml.mixins.json"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'bml.isDevEnv', 'true'

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=bml.mixins.json"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'bml.isDevEnv', 'true'

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'blackdogsmoddinglibrary', '--all', '--output', file("src/main/generated_resources"), '--existing', file('src/main/resources/')

            mods {
                blackdogsmoddinglibrary {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
    }

	//compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "bml",
            "Specification-Vendor": "black_dog20",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "bml",
            "Implementation-Version": archiveVersion.get(),
            "Implementation-Vendor" :"black_dog20",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    destinationDirectory.set(file('build/libs'))
    mustRunAfter "jar"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    destinationDirectory.set(file('build/libs'))
    mustRunAfter "jar"
}

artifacts {
    archives sourceJar
}

curseforge {
    apiKey = curse_apiKey
    project {
        addArtifact (sourceJar)
        id = '371791'
        changelogType = 'markdown'
        changelog = "As always find the changelog here [CHANGELOG](${changelog_url})"
        releaseType = 'release'
        addGameVersion 'Forge'
        addGameVersion 'Java 17'
        addGameVersion '1.19.4'
    }
}

modrinth {
    token = modrinth_token
    projectId = "FbqCRYwN"
    uploadFile = jar
    versionNumber = "${mc_version}-${version}"
    changelog = "As always find the changelog here [CHANGELOG](${changelog_url})"
    versionType = "release"
    loaders = ["forge"]
    gameVersions = ["1.19.4"]
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/crimix/bml")
            credentials {
                username = github_user
                password = github_token
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId 'bml'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact jar
        }
        mavenJava(MavenPublication) {
            artifactId 'bml'
            version mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
            artifact sourceJar
        }
    }
}

mixin {
    add sourceSets.main, "bml.refmap.json"
    config "bml.mixins.json"
}